openapi: 3.1.0
info:
  title: Grafana REST API
  description: Grafana REST API.
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/api/teams/{teamId}/members':
    parameters:
      - schema:
          type: integer
          format: int64
        name: teamId
        description: Team ID to add member to
        in: path
        required: true
    post:
      summary: Add member to a team.
      tags:
        - member
        - team
      operationId: AddTeamMember
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                required:
                  - message
                x-examples:
                  example-1:
                    message: Member added to Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                userId:
                  description: The user ID to be added to the team.
                  type: integer
              required:
                - userId
              x-examples:
                example-1:
                  userId: 2
  /api/org/invites:
    post:
      summary: Invite member to organization.
      tags:
        - invite
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                required:
                  - message
                x-examples:
                  example-1:
                    message: Created invite for test@example.com
      operationId: InviteOrgMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  description: (Optional) The value in the Name field of the account.
                  type: string
                role:
                  description: The organization role to assign this user
                  type: string
                  minLength: 1
                  enum:
                    - Viewer
                    - Editor
                    - Admin
                sendEmail:
                  description: 'Yes - If your organization has SMTP set up, then Grafana sends an email to the user inviting them to log in to Grafana and join your organization. No - The user is not sent an invitation, but they can sign in to the Grafana server with the email or username that you entered.'
                  type: boolean
                loginOrEmail:
                  description: Either the email or username that the user will use to sign in to Grafana.
                  type: string
                  minLength: 1
              required:
                - role
                - loginOrEmail
              x-examples:
                example-1:
                  name: ''
                  role: Editor
                  sendEmail: false
                  loginOrEmail: wallak@wallak.com
      x-internal: false
  '/api/org/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        description: User ID to remove
        in: path
        required: true
    delete:
      summary: Remove user from current organization.
      operationId: RemoveOrgMember
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                required:
                  - message
                x-examples:
                  example-1:
                    message: Member added to Team
  /api/folders:
    post:
      summary: Creates a new folder.
      tags:
        - folder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  uid:
                    type: string
                    minLength: 1
                  title:
                    type: string
                    minLength: 1
                  url:
                    type: string
                    minLength: 1
                  hasAcl:
                    type: boolean
                  canSave:
                    type: boolean
                  canEdit:
                    type: boolean
                  canAdmin:
                    type: boolean
                  createdBy:
                    type: string
                    minLength: 1
                  created:
                    type: string
                    minLength: 1
                  updatedBy:
                    type: string
                    minLength: 1
                  updated:
                    type: string
                    minLength: 1
                  version:
                    type: number
                required:
                  - id
                  - uid
                  - title
                  - url
                  - hasAcl
                  - canSave
                  - canEdit
                  - canAdmin
                  - createdBy
                  - created
                  - updatedBy
                  - updated
                  - version
                x-examples:
                  example-1:
                    id: 3
                    uid: nErXDvfCkzz
                    title: Departmednt ABC
                    url: /dashboards/f/nErXDvfCkzz/departmednt-abc
                    hasAcl: false
                    canSave: true
                    canEdit: true
                    canAdmin: true
                    createdBy: admin
                    created: '2021-08-25T09:10:16Z'
                    updatedBy: admin
                    updated: '2021-08-25T09:10:16Z'
                    version: 1
      operationId: CreateFolder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                uid:
                  type: string
                  minLength: 1
                  description: The unique identifier (uid) of a folder can be used for uniquely identify folders between multiple Grafana installs. Itâ€™s automatically generated if not provided when creating a folder. The uid allows having consistent URLs for accessing folders and when syncing folders between multiple Grafana installs. This means that changing the title of a folder will not break any bookmarked links to that folder.
                title:
                  type: string
                  minLength: 1
              required:
                - title
              x-examples:
                example-1:
                  uid: nErXDvfCkzz
                  title: Departmednt ABC
  /api/dashboards/db:
    post:
      summary: 'Creates a new dashboard or updates an existing dashboard. When updating existing dashboards, if you do not define the folderId or the folderUid property, then the dashboard(s) are moved to the General folder. (You need to define only one property, not both).'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  uid:
                    type: string
                    minLength: 1
                  url:
                    type: string
                    minLength: 1
                  status:
                    type: string
                    minLength: 1
                  version:
                    type: number
                  slug:
                    type: string
                    minLength: 1
                required:
                  - id
                  - uid
                  - url
                  - status
                  - version
                  - slug
                x-examples:
                  example-1:
                    id: 1
                    uid: cIBgcSjkk
                    url: /d/cIBgcSjkk/production-overview
                    status: success
                    version: 1
                    slug: production-overview
      operationId: CreateDashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Folder details
              type: object
              properties:
                dashboard:
                  description: 'The complete dashboard model, id = null to create a new dashboard.'
                  type: object
                  properties:
                    id:
                      type: integer
                      description: null to create a new dashboard.
                    uid:
                      type: string
                      format: uuid
                      description: Optional unique identifier when creating a dashboard. uid = null will generate a new uid.
                    title:
                      type: string
                      minLength: 1
                    tags:
                      type: array
                      items:
                        required: []
                        properties: {}
                    timezone:
                      type: string
                      minLength: 1
                    schemaVersion:
                      type: number
                    version:
                      type: number
                    refresh:
                      description: 'Set the dashboard refresh interval. If this is lower than the minimum refresh interval, then Grafana will ignore it and will enforce the minimum refresh interval.'
                      type: string
                      minLength: 1
                  required:
                    - title
                folderId:
                  description: 'The id of the folder to save the dashboard in. When updating existing dashboards, if you do not define the folderId or the folderUid property, then the dashboard(s) are moved to the General folder. (You need to define only one property, not both).'
                  type: number
                folderUid:
                  description: 'The UID of the folder to save the dashboard in. Overrides the folderId. When updating existing dashboards, if you do not define the folderId or the folderUid property, then the dashboard(s) are moved to the General folder. (You need to define only one property, not both).'
                  type: string
                  minLength: 1
                message:
                  description: Set a commit message for the version history.
                  type: string
                  minLength: 1
                overwrite:
                  description: 'Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.'
                  type: boolean
              required:
                - dashboard
              x-examples:
                example-1:
                  dashboard:
                    id: null
                    uid: null
                    title: Production Overview
                    tags:
                      - templated
                    timezone: browser
                    schemaVersion: 16
                    version: 0
                    refresh: 25s
                  folderId: 0
                  folderUid: nErXDvfCkzz
                  message: Made changes to xyz
                  overwrite: false
  /api/org:
    get:
      summary: Get current organization.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                    minLength: 1
                required:
                  - id
                  - name
                x-examples:
                  example-1:
                    id: 1
                    name: Main Org.
      operationId: GetOrg
  /api/org/users/lookup:
    get:
      summary: Get all users within the current organization (lookup).
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  required:
                    - userId
                    - login
                    - avatarUrl
                  properties:
                    userId:
                      type: number
                    login:
                      type: string
                      minLength: 1
                    avatarUrl:
                      type: string
                      minLength: 1
                x-examples:
                  example-1:
                    - userId: 1
                      login: admin
                      avatarUrl: /avatar/46d229b033af06a191ff2267bca9ae56
              examples:
                example:
                  value:
                    - userId: 1
                      login: admin
                      avatarUrl: /avatar/46d229b033af06a191ff2267bca9ae56
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: GetUsers
  /api/teams/search:
    get:
      summary: Team search with paging.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  totalCount:
                    type: number
                  teams:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - id
                        - orgId
                        - name
                        - email
                        - avatarUrl
                        - memberCount
                      properties:
                        id:
                          type: number
                        orgId:
                          type: number
                        name:
                          type: string
                          minLength: 1
                        email:
                          type: string
                        avatarUrl:
                          type: string
                          minLength: 1
                        memberCount:
                          type: number
                  page:
                    type: number
                  perPage:
                    type: number
                required:
                  - totalCount
                  - teams
                  - page
                  - perPage
                x-examples:
                  example-1:
                    totalCount: 1
                    teams:
                      - id: 1
                        orgId: 1
                        name: MyTestTeam
                        email: ''
                        avatarUrl: /avatar/3f49c15916554246daa714b9bd0ee398
                        memberCount: 1
                    page: 1
                    perPage: 1000
              examples:
                example-1:
                  value:
                    totalCount: 1
                    teams:
                      - id: 1
                        orgId: 1
                        name: MyTestTeam
                        email: ''
                        avatarUrl: /avatar/3f49c15916554246daa714b9bd0ee398
                        memberCount: 1
                    page: 1
                    perPage: 1000
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: GetTeams
      parameters:
        - schema:
            type: string
          in: query
          name: perpage
          description: The number of users to be returned per page. The default value is 1000
        - schema:
            type: string
          in: query
          name: page
          description: The page number. The default value is 1.
        - schema:
            type: string
          in: query
          name: query
          description: The query parameter is optional and it will return results where the query value is contained in the name field. Query values with spaces need to be URL encoded e.g. query=my%20team.
        - schema:
            type: string
          in: query
          name: name
          description: The name parameter returns a single team if the parameter matches the name field.
components:
  schemas: {}
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
security:
  - BearerAuth: []
